<?xml version="1.0"?>

<project name="ipod" default="all" basedir=".">

   <!-- Initialization variables -->
   <property name="app.name" value="${ant.project.name}"/>
   <property name="source.dir" value="src"/>
   <property name="build.dir" value="build"/>
   <property name="classes.dir" value="${build.dir}/classes"/>
   <property name="distribution.dir" value="${build.dir}/distribution"/>
   <property name="jar.name" value="${app.name}.jar"/>

   <!-- files in lib.dir WILL be included in the final JAR -->
   <!-- files in compile.lib.dir will NOT be included in the final JAR -->
   <property name="lib.dir" value="lib"/>
   <property name="compile.lib.dir" value="compile-lib"/>

   <!-- test variables -->
   <property name="test.dir" value="${build.dir}/test"/>
   <property name="test.data.dir" value="${test.dir}/data"/>
   <property name="test.reports.dir" value="${test.dir}/reports"/>

   <property name="unit.test.source.dir" value="${source.dir}"/>
   <property name="unit.test.data.dir" value="${test.data.dir}/unit"/>
   <property name="unit.test.reports.dir" value="${test.reports.dir}/unit"/>

   <property name="fn.test.source.dir" value="${source.dir}"/>
   <property name="fn.test.data.dir" value="${test.data.dir}/fn"/>
   <property name="fn.test.reports.dir" value="${test.reports.dir}/fn"/>

   <property name="coverage.test.data.dir" value="${test.data.dir}/coverage"/>
   <property name="coverage.test.reports.dir"
             value="${test.reports.dir}/coverage"/>
   <property name="coverage.test.instrumented.dir"
             value="${test.dir}/instrumented"/>

   <property name="cobertura.dir" value="${compile.lib.dir}/cobertura-1.9"/>

   <!--
    =======================================================
       This builds the classpath used for compilation.
       NOTE: This is independent of your system classpath
    =======================================================
   -->
   <path id="compile.classpath">
      <fileset dir="${compile.lib.dir}">
         <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${lib.dir}">
         <include name="**/*.jar"/>
      </fileset>
   </path>


   <!-- ============================= -->
   <target name="init" description="Create initial directory tree">

      <!-- base java dev dirs -->
      <mkdir dir="${source.dir}"/>
      <mkdir dir="compile-lib"/>
      <mkdir dir="${compile.lib.dir}"/>

   </target>

   <!-- ============================= -->
   <target name="all" depends="clean,compile,test.unit,jar"
           description="Does the whole enchilada"/>

   <!-- ====================================== -->
   <target name="clean" description="Deletes compiled and generated code">
      <delete dir="${build.dir}"/>
   </target>

  <!-- ====================================== -->
  <target name="compile" description="Compiles the Java code">
     <mkdir dir="${build.dir}"/>
     <mkdir dir="${classes.dir}"/>

    <!-- The Joint Compiler passes *.java thru to javac,
         *.groovy thru to groovyc -->
    <taskdef name="groovyc"
             classname="org.codehaus.groovy.ant.Groovyc"
             classpath="lib/groovy-all-1.5.0.jar"/>

    <groovyc srcdir="${source.dir}"
             destdir="${classes.dir}"
             jointCompilationOptions="-j -Jsource=1.4 -Jtarget=1.4">
       <classpath>
          <path refid="compile.classpath"/>
          <pathelement location="${classes.dir}"/>
       </classpath>
    </groovyc>

     <copy todir="${classes.dir}">
        <fileset dir="${source.dir}">
           <include name="**/*.properties"/>
           <include name="**/*.xml"/>
        </fileset>
     </copy>


  </target>



  <!-- ====================================== -->
  <target name="old-style-groovy-1.0-compile" description="Compiles the Java code">
     <mkdir dir="${build.dir}"/>
     <mkdir dir="${classes.dir}"/>

     <javac srcdir="${source.dir}" destdir="${classes.dir}" debug="on"
            deprecation="on">
        <classpath refid="compile.classpath"/>
     </javac>

     <copy todir="${classes.dir}">
        <fileset dir="${source.dir}">
           <include name="**/*.properties"/>
           <include name="**/*.xml"/>
        </fileset>
     </copy>

     <taskdef name="groovyc"
              classname="org.codehaus.groovy.ant.Groovyc"
              classpath="lib/groovy-all-1.5.0.jar"/>

     <groovyc srcdir="${source.dir}"
              destdir="${classes.dir}">
        <classpath>
           <path refid="compile.classpath"/>
           <pathelement location="${classes.dir}"/>
        </classpath>
     </groovyc>

  </target>

   <!-- ====================================== -->
   <target name="jar" depends="compile"
           description="Packages the files into a JAR file">
      <mkdir dir="${distribution.dir}"/>

      <jar destFile="${distribution.dir}/${jar.name}">
         <fileset dir="${classes.dir}">
            <include name="**/*.*"/>
            <exclude name="**/*Test.*"/>
            <exclude name="**/*TestFn.*"/>
         </fileset>
      </jar>
   </target>


   <!-- ====================================== -->
   <target name="test.unit" depends="compile" description="Runs unit tests">
      <mkdir dir="${test.dir}"/>
      <mkdir dir="${test.data.dir}"/>
      <mkdir dir="${test.reports.dir}"/>

      <mkdir dir="${unit.test.data.dir}"/>
      <mkdir dir="${unit.test.reports.dir}"/>

      <junit printsummary="false" errorProperty="test.failed"
             failureProperty="test.failed">
         <classpath>
            <path refid="compile.classpath"/>
            <pathelement location="${classes.dir}"/>
         </classpath>
         <formatter type="brief" usefile="false"/>
         <formatter type="xml"/>
         <batchtest todir="${unit.test.data.dir}">
            <fileset dir="${classes.dir}" includes="**/*Test.class"/>
         </batchtest>
      </junit>

      <junitreport todir="${unit.test.data.dir}">
         <fileset dir="${unit.test.data.dir}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames" todir="${unit.test.reports.dir}"/>
      </junitreport>

      <fail message="***** Tests failed. Check reports for details."
            if="test.failed"/>
   </target>


   <!-- ====================================== -->
   <target name="test.fn" depends="compile" description="Runs functional tests">
      <mkdir dir="${test.dir}"/>
      <mkdir dir="${test.data.dir}"/>
      <mkdir dir="${test.reports.dir}"/>

      <mkdir dir="${fn.test.data.dir}"/>
      <mkdir dir="${fn.test.reports.dir}"/>

      <junit printsummary="false" errorProperty="test.failed"
             failureProperty="test.failed">
         <classpath>
            <path refid="compile.classpath"/>
            <pathelement location="${classes.dir}"/>
         </classpath>
         <formatter type="brief" usefile="false"/>
         <formatter type="xml"/>
         <batchtest todir="${fn.test.data.dir}">
            <fileset dir="${classes.dir}" includes="**/*TestFn.class"/>
         </batchtest>
      </junit>

      <junitreport todir="${fn.test.data.dir}">
         <fileset dir="${fn.test.data.dir}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames" todir="${fn.test.reports.dir}"/>
      </junitreport>

      <fail message="***** Tests failed. Check reports for details."
            if="test.failed"/>
   </target>


   <!-- ====================================== -->
   <target name="test.cover" depends="compile"
           description="Runs coverage tests">
      <mkdir dir="${test.dir}"/>
      <mkdir dir="${test.data.dir}"/>
      <mkdir dir="${test.reports.dir}"/>

      <mkdir dir="${coverage.test.data.dir}"/>
      <mkdir dir="${coverage.test.reports.dir}"/>

      <path id="cobertura.classpath">
         <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar"/>
            <include name="lib/**/*.jar"/>
         </fileset>
      </path>

      <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
      <property name="cobertura.datafile"
                value="${coverage.test.instrumented.dir}/cobertura.ser"/>

      <delete dir="${coverage.test.instrumented.dir}"/>

      <cobertura-instrument
            datafile="${cobertura.datafile}"
            todir="${coverage.test.instrumented.dir}">
         <ignore regex="org.apache.log4j.*"/>
         <fileset dir="${classes.dir}">
            <include name="**/*.class"/>
            <exclude name="**/*Test.class"/>
            <exclude name="**/*TestFn.class"/>
         </fileset>
      </cobertura-instrument>


      <!-- note: your instrumented classes must come first -->
      <junit fork="yes" printsummary="false" errorProperty="test.failed"
             failureProperty="test.failed">
         <sysproperty key="net.sourceforge.cobertura.datafile"
                      file="${cobertura.datafile}"/>

         <classpath>
            <pathelement location="${coverage.test.instrumented.dir}"/>
            <pathelement location="${classes.dir}"/>
            <path refid="compile.classpath"/>
            <path refid="cobertura.classpath"/>
         </classpath>
         <classpath location="${classes.dir}"/>
         <classpath refid="compile.classpath"/>
         <formatter type="brief" usefile="false"/>
         <formatter type="xml"/>
         <batchtest todir="${unit.test.data.dir}">
            <fileset dir="${classes.dir}" includes="**/*Test.class"/>
         </batchtest>
      </junit>

      <!-- junit html reports -->
      <junitreport todir="${unit.test.data.dir}">
         <fileset dir="${unit.test.data.dir}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames" todir="${unit.test.reports.dir}"/>
      </junitreport>

      <!-- cobertura html reports -->
      <cobertura-report
            datafile="${cobertura.datafile}"
            destdir="${coverage.test.reports.dir}">
         <fileset dir="${source.dir}">
            <include name="**/*.java"/>
            <include name="**/*.groovy"/>
         </fileset>
      </cobertura-report>

      <!-- cobertura xml reports -->
      <cobertura-report
            datafile="${cobertura.datafile}"
            srcdir="${source.dir}" destdir="${coverage.test.data.dir}"
            format="xml"/>

      <fail message="***** Tests failed. Check reports for details."
            if="test.failed"/>
   </target>


   <!-- ====================================== -->
   <target name="test.all" depends="compile, test.unit, test.fn, test.cover">

   </target>

</project>
